{"version":3,"sources":["Row.js","Table.js","Controls.js","Store.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","react_default","a","createElement","data","name","salary","Table","store","this","employeesList","map","e","i","src_Row","key","React","Component","observer","Controls","addEmployee","prompt","parseInt","_this","pushEmployee","clearList","className","onClick","Store","push","decorate","observable","action","appStore","App","src_Controls","src_Table","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PAQeA,EANH,SAACC,GACT,OAAQC,EAAAC,EAAAC,cAAA,UACNF,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,KAAKC,MAChBJ,EAAAC,EAAAC,cAAA,UAAKH,EAAMI,KAAKE,iBCDhBC,mLACO,IACGC,EAAUC,KAAKT,MAAfQ,MACR,OAAQP,EAAAC,EAAAC,cAAA,aACJF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,6BAGRF,EAAAC,EAAAC,cAAA,aACKK,EAAME,cAAcC,IAAI,SAACC,EAAGC,GAAJ,OACrBZ,EAAAC,EAAAC,cAACW,EAAD,CACIC,IAAKF,EACLT,KAAMQ,eAdVI,IAAMC,WAuBXV,EAFfA,EAAQW,YAASX,GCDFY,6MArBXC,YAAc,WACZ,IAAMf,EAAOgB,OAAO,aACdf,EAASgB,SAASD,OAAO,eAAgB,IAC/CE,EAAKvB,MAAMQ,MAAMgB,aAAc,CAACnB,OAAMC,cAIxCmB,UAAY,WACVF,EAAKvB,MAAMQ,MAAMiB,qFAKjB,OAAQxB,EAAAC,EAAAC,cAAA,OAAKuB,UAAU,YACrBzB,EAAAC,EAAAC,cAAA,UAAQwB,QAASlB,KAAKgB,WAAtB,eACAxB,EAAAC,EAAAC,cAAA,UAAQwB,QAASlB,KAAKW,aAAtB,sBAhBeJ,IAAMC,kBCIvBW,mDACFlB,cAAgB,CACd,CAAEL,KAAM,WAAYC,OAAQ,KAC5B,CAAED,KAAM,cAAeC,OAAQ,8DAG/BG,KAAKC,cAAgB,wCAGVE,GACXH,KAAKC,cAAcmB,KAAKjB,YAI5BkB,YAASF,EAAO,CACdlB,cAAeqB,IACfN,UAAWO,IACXR,aAAcQ,MAGDJ,QClBXK,SAAW,IAAIL,GAgBNM,mLAVX,OACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIuB,UAAU,WAAd,cACAzB,EAAAC,EAAAC,cAACgC,EAAD,CAAUT,UAAU,WAAWlB,MAAOyB,IACtChC,EAAAC,EAAAC,cAACiC,EAAD,CAAO5B,MAAOyB,YANJhB,aCAEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9f2c7e65.chunk.js","sourcesContent":["import React from 'react';\n\nconst Row = (props) => {\n    return (<tr>\n      <td>{props.data.name}</td>\n      <td>{props.data.salary}</td>\n    </tr>)\n  }\nexport default Row  ","import React from 'react'\nimport Row from './Row'\nimport { observer } from \"mobx-react\"\n\nclass Table extends React.Component {\n    render() {\n        const { store } = this.props\n        return (<table>\n            <thead>\n                <tr>\n                    <td>Name:</td>\n                    <td>Daily salary:</td>\n                </tr>\n            </thead>\n            <tbody>\n                {store.employeesList.map((e, i) =>\n                    <Row\n                        key={i}\n                        data={e}\n                    />\n                )}\n            </tbody>\n        </table>)\n    }\n}\nTable = observer(Table)\n\nexport default Table","import React from 'react'\n\nclass Controls extends React.Component {\n    addEmployee = () => {\n      const name = prompt(\"The name:\")\n      const salary = parseInt(prompt(\"The salary:\"), 10)\n      this.props.store.pushEmployee( {name, salary} )\n  \n    }\n  \n    clearList = () => {\n      this.props.store.clearList()\n      // because table observes employeelist everything updates\n    }\n  \n    render() {\n      return (<div className=\"controls\">\n        <button onClick={this.clearList}>clear table</button>\n        <button onClick={this.addEmployee}>add record</button>\n      </div>)\n    }\n  }\n  \n\nexport default Controls","\n\nimport {action} from \"mobx\"\nimport { decorate, observable } from \"mobx\"\n\n\nclass Store {\n    employeesList = [\n      { name: \"John Doe\", salary: 150 },\n      { name: \"Richard Roe\", salary: 225 },\n    ]\n    clearList() {\n      this.employeesList = []\n    }\n  \n    pushEmployee(e) {\n      this.employeesList.push(e)\n    }\n  }\n  \n  decorate(Store, {\n    employeesList: observable,\n    clearList: action,\n    pushEmployee: action\n  })\n  \n  export default Store","import React, { Component } from 'react';\n\nimport Table from './Table'\nimport Controls from './Controls'\nimport Store from './Store'\n\nimport './App.css'\n\nconst appStore = new Store()\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <h1 className=\"heading\" >Mobx Table</h1>\n        <Controls className=\"controls\" store={appStore} />\n        <Table store={appStore} />\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}